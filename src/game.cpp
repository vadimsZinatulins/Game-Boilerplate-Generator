#include "game.h"
#include "utils.h"

void generateGameHeader()
{
	mkfile("include/Game.h", {		
		"#pragma once",
		"",
		"struct SDL_Window;",
		"struct SDL_Renderer;",
		"",
		"class Game",
		"{",
		"public:",
		"	Game() = default;",
		"	virtual ~Game() = default;",
		"",
		"	void run();",
		"protected:",
		"	virtual void initialize() = 0;",
		"	virtual void shutdown() = 0;",
		"	virtual void update() = 0;",
		"	virtual void render(SDL_Renderer *renderer) = 0;",
		"private:",
		"	void init();",
		"	void loop();",
		"	void close();",
		"",
		"	SDL_Window *m_window { nullptr };",
		"	SDL_Renderer *m_renderer { nullptr };",
		"};"
	});
}

void generateGameSource()
{
	mkfile("src/Game.cpp", {		
		"#include \"Game.h\"",
		"#include \"Time.h\"",
		"#include \"KeyManager.h\"",
		"#include \"MouseManager.h\"",
		"#include \"config.h\"",
		"",
		"#include <SDL2/SDL.h>",
		"",
		"void Game::run()",
		"{",
		"	init();",
		"	loop();",
		"	close();",
		"}",
		"",
		"void Game::init(){",
		"	SDL_Init(SDL_INIT_VIDEO);",
		"",
		"	m_window = SDL_CreateWindow(SCREEN_TITLE, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);",
		"	m_renderer = SDL_CreateRenderer(m_window, -1, SDL_RENDERER_ACCELERATED);",
		"",
		"	SDL_SetRenderDrawColor(m_renderer, 0x00f, 0x00f, 0x00f, 0xff);",
		"",
		"	initialize();",
		"}",
		"",
		"void Game::loop(){",
		"	auto &keys = KeyManager::getInstance();",
		"	auto &mouse = MouseManager::getInstance();",
		"	bool isRunning = true;",
		"	SDL_Event e;",
		"",
		"	Uint32 startFrame = SDL_GetTicks();",
		"	Uint32 startPreviousFrame = SDL_GetTicks();",
		"",
		"	while(isRunning)",
		"	{",
		"		Time frameTimer;",
		"",
		"		keys.update();",
		"		mouse.update();",
		"",
		"		while(SDL_PollEvent(&e))",
		"		{",
		"			switch(e.type)",
		"			{",
		"			case SDL_QUIT:",
		"				isRunning = false;",
		"				break;",
		"			case SDL_KEYDOWN:",
		"				keys.keyPressed(e.key.keysym.sym);",
		"				break;",
		"			case SDL_KEYUP:",
		"				keys.keyReleased(e.key.keysym.sym);",
		"				break;",
		"			case SDL_MOUSEBUTTONDOWN:",
		"				mouse.buttonPressed(static_cast<MouseButton>(e.button.button));",
		"				break;",
		"			case SDL_MOUSEBUTTONUP:",
		"				mouse.buttonReleased(static_cast<MouseButton>(e.button.button));",
		"				break;",
		"			case SDL_MOUSEMOTION:",
		"				mouse.mouseMoved(e.motion.x, e.motion.y, e.motion.xrel, e.motion.yrel);",
		"				break;",
		"			}",
		"		}",
		"",
		"		update();",
		"",
		"		SDL_RenderClear(m_renderer);",
		"		render(m_renderer);",
		"		SDL_RenderPresent(m_renderer);",
		"",
		"	}",
		"}",
		"",
		"void Game::close()",
		"{",
		"	shutdown();",
		"",
		"	if(m_renderer)",
		"	{",
		"		SDL_DestroyRenderer(m_renderer);",
		"",
		"		m_renderer = nullptr;",
		"	}",
		"",
		"	if(m_window)",
		"	{",
		"		SDL_DestroyWindow(m_window);",
		"		m_window = nullptr;",
		"	}",
		"",
		"	SDL_Quit();",
		"}",
		"",
	});
}

void generateGameClass()
{
	generateGameHeader();
	generateGameSource();
}
