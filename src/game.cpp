#include "game.h"
#include "utils.h"

void generateGameHeader()
{
	mkfile("include/BE/Game.h", {		
		"#pragma once",
		"",
		"#include \"BE/Time.h\"",
		"#include \"BE/KeyManager.h\"",
		"#include \"BE/MouseManager.h\"",
		"#include \"BE/SceneManager.h\"",
		"#include \"config.h\"",
		"",
		"#include <SDL2/SDL.h>",
		"",
		"namespace BE",
		"{",
		"",
		"template <typename T>",
		"class Game",
		"{",
		"public:",
		"	Game() = default;",
		"	virtual ~Game() = default;",
		"",
		"	void run()",
		"	{",
		"		init();",
		"		loop();",
		"		close();",
		"	}",
		"private:",
		"	void init()",
		"	{",
		"		SDL_Init(SDL_INIT_VIDEO);",
		"",
		"		m_window = SDL_CreateWindow(SCREEN_TITLE, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);",
		"		m_renderer = SDL_CreateRenderer(m_window, -1, SDL_RENDERER_ACCELERATED);",
		"",
		"		SDL_SetRenderDrawColor(m_renderer, 0x00f, 0x00f, 0x00f, 0xff);",
		"",
		"		static_cast<T*>(this)->initialize();",
		"",
		"		SceneManager::getInstance().updateState();",
		"	}",
		"",
		"	void loop()",
		"	{",
		"		auto &keys = KeyManager::getInstance();",
		"		auto &mouse = MouseManager::getInstance();",
		"		auto &scenes = SceneManager::getInstance();",
		"		bool isRunning = true;",
		"		SDL_Event e;",
		"",
		"		Uint32 startFrame = SDL_GetTicks();",
		"		Uint32 startPreviousFrame = SDL_GetTicks();",
		"",
		"		while(IScene *scene = scenes.getActiveScene())",
		"		{",
		"			Time frameTimer;",
		"",
		"			keys.update();",
		"			mouse.update();",
		"",
		"			while(SDL_PollEvent(&e))",
		"			{",
		"				switch(e.type)",
		"				{",
		"				case SDL_QUIT:",
		"					isRunning = false;",
		"					scenes.popAllScenes();",
		"					break;",
		"				case SDL_KEYDOWN:",
		"					keys.keyPressed(e.key.keysym.sym);",
		"					break;",
		"				case SDL_KEYUP:",
		"					keys.keyReleased(e.key.keysym.sym);",
		"					break;",
		"				case SDL_MOUSEBUTTONDOWN:",
		"					mouse.buttonPressed(static_cast<MouseButton>(e.button.button));",
		"					break;",
		"				case SDL_MOUSEBUTTONUP:",
		"					mouse.buttonReleased(static_cast<MouseButton>(e.button.button));",
		"					break;",
		"				case SDL_MOUSEMOTION:",
		"					mouse.mouseMoved(e.motion.x, e.motion.y, e.motion.xrel, e.motion.yrel);",
		"					break;",
		"				}",
		"			}",
		"",
		"			scene->update();",
		"",
		"			SDL_RenderClear(m_renderer);",
		"			scene->render(m_renderer);",
		"			SDL_RenderPresent(m_renderer);",
		"",
		"		}",
		"	}",
		"",
		"	void close()",
		"	{",
		"		static_cast<T*>(this)->shutdown();",
		"",
		"		if(m_renderer)",
		"		{",
		"			SDL_DestroyRenderer(m_renderer);",
		"",
		"			m_renderer = nullptr;",
		"		}",
		"",
		"		if(m_window)",
		"		{",
		"			SDL_DestroyWindow(m_window);",
		"			m_window = nullptr;",
		"		}",
		"",
		"		SDL_Quit();",
		"	}",
		"",
		"	SDL_Window *m_window { nullptr };",
		"	SDL_Renderer *m_renderer { nullptr };",
		"};",
		"",
		"}"
	});
}

void generateGameClass()
{
	generateGameHeader();
}
